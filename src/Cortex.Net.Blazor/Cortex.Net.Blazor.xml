<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cortex.Net.Blazor</name>
    </assembly>
    <members>
        <member name="T:Cortex.Net.Blazor.Observer">
            <summary>
            Sometimes it is hard to apply Observer to a part of the rendering,
            for example because you are rendering inside a RenderFragment,
            and you don't want to extract a new component to be able to mark it as observer.
            In those cases <Observer /> comes in handy. It takes a child content that
            is automatically re-rendered if any referenced observables change.
            </summary>
        </member>
        <member name="P:Cortex.Net.Blazor.Observer.ChildContent">
            <summary>
            Gets or sets the wrapped child content of the component.
            </summary>
        </member>
        <member name="M:Cortex.Net.Blazor.Observer.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Cortex.Net.Blazor.ObserverAttribute">
            <summary>
            Attribute that indicates that the Blazor component should react on observable state in this component.
            </summary>
        </member>
        <member name="M:Cortex.Net.Blazor.ObserverAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cortex.Net.Blazor.ObserverAttribute"/> class.
            </summary>
        </member>
        <member name="M:Cortex.Net.Blazor.ObserverAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cortex.Net.Blazor.ObserverAttribute"/> class.
            </summary>
            <param name="name">The name of the observer.</param>
        </member>
        <member name="P:Cortex.Net.Blazor.ObserverAttribute.Name">
            <summary>
            Gets the Name of the action.
            </summary>
        </member>
        <member name="T:Cortex.Net.Blazor.ObserverObject">
            <summary>
            Observer object that encapsulates a reaction to automatically track dependencies
            and rerender when any of the dependencies change.
            </summary>
        </member>
        <member name="F:Cortex.Net.Blazor.ObserverObject.sharedState">
            <summary>
            The shared state this observer is connected to.
            </summary>
        </member>
        <member name="F:Cortex.Net.Blazor.ObserverObject.name">
            <summary>
            The name of the observer.
            </summary>
        </member>
        <member name="F:Cortex.Net.Blazor.ObserverObject.buildRenderTreeAction">
            <summary>
            The action that should be executed to build the render tree.
            </summary>
        </member>
        <member name="F:Cortex.Net.Blazor.ObserverObject.stateChangedAction">
            <summary>
            The action that is used to force StateHasChanged for this Component.
            </summary>
        </member>
        <member name="F:Cortex.Net.Blazor.ObserverObject.reactions">
            <summary>
            Gets the dictionary of created reactions.
            </summary>
        </member>
        <member name="F:Cortex.Net.Blazor.ObserverObject.nextFragmentId">
            <summary>
            The next fragment Id.
            </summary>
        </member>
        <member name="F:Cortex.Net.Blazor.ObserverObject.current">
            <summary>
            Gets the current RenderFragment.
            </summary>
        </member>
        <member name="M:Cortex.Net.Blazor.ObserverObject.#ctor(Cortex.Net.ISharedState,System.String,System.Action{Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Cortex.Net.Blazor.ObserverObject"/> class.
            </summary>
            <param name="sharedState">The shared state this observer is connected to.</param>
            <param name="name">The name of the observer.</param>
            <param name="buildRenderTreeAction">The action that should be executed to build the render tree.</param>
            <param name="stateChangedAction">The action that is used to force StateHasChanged for this Component.</param>
        </member>
        <member name="M:Cortex.Net.Blazor.ObserverObject.Dispose">
            <summary>
            Disposes the internal reaction that is used to track dependenies.
            </summary>
        </member>
        <member name="M:Cortex.Net.Blazor.ObserverObject.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <summary>
            Builds the render tree for the Component and automatically tracks dependencies.
            </summary>
            <param name="renderTreeBuilder">The render tree builder to use.</param>
        </member>
        <member name="M:Cortex.Net.Blazor.ObserverObject.ReactiveRenderFragment(Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Creates a reactive RenderFragment that tracks a RenderFragment.
            and Invokes the StateHasChanged action passed
            in the constructor when any of the fragments have changed.
            </summary>
            <param name="renderFragment">The render fragment to track.</param>
            <returns>A new Renderfragment that wraps the old one.</returns>
        </member>
        <member name="M:Cortex.Net.Blazor.ObserverObject.ReactiveRenderFragment``1(Microsoft.AspNetCore.Components.RenderFragment{``0})">
            <summary>
            Creates a reactive RenderFragment that tracks a RenderFragment.
            and Invokes the StateHasChanged action passed
            in the constructor when any of the fragments have changed.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="renderFragment">The render fragment to encapsulate.</param>
            <returns>The encapsulated render framgent.</returns>
        </member>
    </members>
</doc>
